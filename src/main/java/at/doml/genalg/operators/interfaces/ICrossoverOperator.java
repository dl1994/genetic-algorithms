package at.doml.genalg.operators.interfaces;

import at.doml.genalg.exceptions.IncompatibleParentsException;
import at.doml.genalg.exceptions.TooFewParentsException;
import at.doml.genalg.population.interfaces.IChromosome;
import at.doml.genalg.operators.abstracts.AbstractCrossoverOperator;
import java.util.SortedSet;

/**
 * Interface which defines methods for crossover operator. It is recommended that all implementations of crossover
 * operator extend <code>AbstractCrossoverOperator</code> instead of directly implementing this interface.
 * 
 * @author Domagoj Lateƒçki
 * @version 1.0
 * @since 1.8
 * @param <C> Type of chromosome which will be used in the crossover operator.
 * @see IChromosome
 * @see AbstractCrossoverOperator
 */
public interface ICrossoverOperator<C extends IChromosome> {
    
    /**
     * Performs crossover using the given set of chromosomes as parents. The parents are expected to be sorted by their
     * fitness in descending order. All of the parents given in the set will be used in the crossover. In order to work
     * correctly, the crossover needs to receive at least 2 parent chromosomes.
     * 
     * @param parents set which contains chromosomes which will be used in the crossover.
     * @return Chromosome which was generated by the crossover.
     * @throws IncompatibleParentsException thrown if provided parents are incompatible for crossover.
     * @throws TooFewParentsException thrown if less than 2 parents are provided for the crossover.
     */
    public C doCrossover(SortedSet<C> parents);
}
