// Copyright (C) 2016 Domagoj Latečki
/* You may use, distribute and modify this code under the terms of the MIT license. */
package hr.dlatecki.algorithms.gen_alg.operators.abstracts;

import java.util.Random;
import hr.dlatecki.algorithms.gen_alg.population.chromosomes.DoubleArrayChromosome;

/**
 * An abstract class for mutation operators that rely on come kind of probability distribution. The mutation intensity
 * affects the variance of the distribution. Variance is scaled linearly according to the mutation intensity.
 * 
 * @author Domagoj Latečki
 * @version 1.0
 * @since 1.8a
 * @param <C> the type of chromosome which will be used in the mutation operator.
 * @see AbstractMutationOperator
 */
public abstract class AbstractDistributionMutation<C extends DoubleArrayChromosome>
        extends AbstractMutationOperator<C> {
        
    /**
     * The variance of the distribution.
     */
    private final double variance;
    
    /**
     * Constructs an abstract distribution mutation operator with provided parameters. Mutation intensity must be in
     * range [0, 1]. Variance must be a positive number.
     * 
     * @param rand object used to generate random numbers.
     * @param mutationIntensity intensity at which mutation will occur. Valid value range is [0, 1].
     * @param variance variance of the distribution. Must be a positive number.a
     * @throws IllegalArgumentException thrown if any of the arguments has an illegal value.
     */
    public AbstractDistributionMutation(Random rand, double mutationIntensity, double variance) {
        super(rand, mutationIntensity);
        
        if (variance <= 0) {
            throw new IllegalArgumentException("Variance must be a positive number. Provided value was: " + variance);
        }
        
        this.variance = variance;
    }
    
    @Override
    public C mutate(C chromosome) {
        
        double[] values = chromosome.getValues();
        
        for (int i = 0; i < values.length; i++) {
            values[i] = calculateNewValue(values[i], variance * mutationIntensity);
        }
        
        chromosome.setValues(values);
        
        return chromosome;
    }
    
    /**
     * Calculates the new value generated by the distribution using the old value and provided variance.
     * 
     * @param oldValue value which is used to calculate the new value generated by the distribution.
     * @param variance value of the variance which will be provided to the distribution in order to calculate the new
     *            value.
     * @return New value which was calculated using the distribution.
     */
    protected abstract double calculateNewValue(double oldValue, double variance);
}
