// Copyright (C) Domagoj Latečki
// You may use, distribute and modify this code under the terms of the MIT license.
package hr.dlatecki.algorithms.gen_alg.operators.mutation;

import java.util.Random;
import hr.dlatecki.algorithms.gen_alg.operators.abstracts.AbstractDistributionMutation;
import hr.dlatecki.algorithms.gen_alg.population.chromosomes.DoubleArrayChromosome;

/**
 * An implementation of mutation operator which uses the normal (or Gaussian) distribution to generate mutated values.
 * The new value is calculated by adding a value which is randomly generated using the normal distribution. While the
 * theoretical value which can be added is not limited by the normal distribution, most of the values will fall within
 * the provided range of the variance. For example, if provided variance is 1.5, then most of the values (around 68%)
 * will be in range [-1.5, 1.5] and around 95% of values will be in range [-3.0, 3.0]. This is true only if bias is set
 * to zero. Ranges will shift according to the bias value. For previous example, if bias is set to 1.5, then around 68%
 * of the values will be in range [0.0, 3.0] and around 95% of values will be in range [-1.5, 4.5]. In other words, bias
 * is always added to the value which was generated by the distribution.<br>
 * <br>
 * More info about the normal distribution can be found
 * <a href = "https://en.wikipedia.org/wiki/Normal_distribution">here</a>.<br>
 * <br>
 * This mutation can only be used on chromosomes which extend the <code>DoubleArrayChromosome</code>.
 * 
 * @author Domagoj Latečki
 * @version 1.0
 * @since 1.8
 * @param <C> the type of chromosome which will be used in the mutation operator.
 * @see AbstractDistributionMutation
 * @see DoubleArrayChromosome
 */
public class GaussianDistributionMutation<C extends DoubleArrayChromosome> extends AbstractDistributionMutation<C> {
    
    /**
     * This value will always be added to the value generated by the distribution.
     */
    private final double bias;
    
    /**
     * Constructs a normal distribution mutation operator using the provided parameters. Mutation intensity affects the
     * variance which will be used in the distribution.
     * 
     * @param rand object used to generate random numbers.
     * @param mutationIntensity intensity at which mutation will occur. Valid value range is [0, 1].
     * @param variance variance of the distribution. Must be a positive number.
     * @param bias value which is always added to the value generated by the distribution.
     * @throws IllegalArgumentException thrown if any of the arguments has an illegal value.
     */
    public GaussianDistributionMutation(Random rand, double mutationIntensity, double variance, double bias) {
        super(rand, mutationIntensity, variance);
        this.bias = bias;
    }
    
    @Override
    protected double calculateNewValue(double oldValue, double variance) {
        
        return oldValue + rand.nextGaussian() * variance + bias;
    }
}
