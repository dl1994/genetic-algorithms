// Copyright (C) Domagoj Latečki
// You may use, distribute and modify this code under the terms of the MIT license.
package hr.dlatecki.algorithms.gen_alg.operators.abstracts;

import java.util.Random;
import java.util.SortedSet;
import hr.dlatecki.algorithms.gen_alg.exceptions.IncompatibleParentsException;
import hr.dlatecki.algorithms.gen_alg.exceptions.TooFewParentsException;
import hr.dlatecki.algorithms.gen_alg.operators.interfaces.ICrossoverOperator;
import hr.dlatecki.algorithms.gen_alg.population.interfaces.IChromosome;

/**
 * An abstract class for crossover operator. It is recommended that all implementations of crossover operator extend
 * this class instead of directly implementing <code>ICrossoverOperator</code> interface.
 * 
 * @author Domagoj Latečki
 * @version 1.0
 * @since 1.8
 * @param <C> the type of chromosome which will be used in the crossover operator.
 * @see IChromosome
 * @see ICrossoverOperator
 */
public abstract class AbstractCrossoverOperator<C extends IChromosome> extends AbstractOperator
        implements ICrossoverOperator<C> {
        
    /**
     * Constructs a crossover operator with provided <code>Random</code> object.
     * 
     * @param rand object used to generate random numbers.
     */
    public AbstractCrossoverOperator(Random rand) {
        super(rand);
    }
    
    /**
     * {@inheritDoc}
     * 
     * @throws IncompatibleParentsException thrown if provided parents are incompatible for crossover.
     * @throws TooFewParentsException thrown if less than 2 parents are provided for the crossover.
     */
    @Override
    public C doCrossover(SortedSet<C> parents) {
        
        if (parents.size() < 2) {
            throw new TooFewParentsException();
        }
        
        return createChild(parents);
    }
    
    /**
     * Creates a child chromosome using the given set of parent chromosomes. The parents are sorted by their fitness in
     * the descending order. The number of parents is guaranteed to be at least 2.
     * 
     * @param parents set of parents which is used to create a child chromosome.
     * @return Chromosome which was generated by the crossover.
     * @throws IncompatibleParentsException thrown if provided parents are incompatible for crossover.
     */
    protected abstract C createChild(SortedSet<C> parents);
}
