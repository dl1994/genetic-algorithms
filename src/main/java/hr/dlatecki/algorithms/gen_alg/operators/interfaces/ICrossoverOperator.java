/* 
 * The MIT License (MIT)
 * 
 * Copyright © 2016 Domagoj Latečki
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package hr.dlatecki.algorithms.gen_alg.operators.interfaces;

import java.util.SortedSet;
import hr.dlatecki.algorithms.gen_alg.exceptions.IncompatibleParentsException;
import hr.dlatecki.algorithms.gen_alg.exceptions.TooFewParentsException;
import hr.dlatecki.algorithms.gen_alg.operators.abstracts.AbstractCrossoverOperator;
import hr.dlatecki.algorithms.gen_alg.population.interfaces.IChromosome;

/**
 * Interface which defines methods for crossover operator. It is recommended that all implementations of crossover
 * operator extend <code>AbstractCrossoverOperator</code> instead of directly implementing this interface.
 * 
 * @author Domagoj Latečki
 * @version 1.0
 * @since 1.8
 * @param <C> Type of chromosome which will be used in the crossover operator.
 * @see IChromosome
 * @see AbstractCrossoverOperator
 */
public interface ICrossoverOperator<C extends IChromosome> {
    
    /**
     * Performs crossover using the given set of chromosomes as parents. The parents are expected to be sorted by their
     * fitness in descending order. All of the parents given in the set will be used in the crossover. In order to work
     * correctly, the crossover needs to receive at least 2 parent chromosomes.
     * 
     * @param parents set which contains chromosomes which will be used in the crossover.
     * @return Chromosome which was generated by the crossover.
     * @throws IncompatibleParentsException thrown if provided parents are incompatible for crossover.
     * @throws TooFewParentsException thrown if less than 2 parents are provided for the crossover.
     */
    public C doCrossover(SortedSet<C> parents);
}
